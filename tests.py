from modules.calculator import Calculator
from modules.history import HistoryManager

def print_test_result(test_name, result, expected=None):
    status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ù–ï –ü–†–û–®–ï–õ"
    print(f"{status} {test_name}")
    if expected and not result:
        print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {expected}")

def test_top_down():
    print("\n" + "="*60)
    print("üîΩ –ù–ò–°–•–û–î–Ø–©–ï–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("="*60)
    
    print("\nüìç –®–ê–ì 1: –¢–û–õ–¨–ö–û –ò–ù–¢–ï–†–§–ï–ô–° (–±–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏ –∏—Å—Ç–æ—Ä–∏–∏)")
    try:
        print("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç '2+2'")
        print("–†–µ–∑—É–ª—å—Ç–∞—Ç: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω - –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã")
        test_passed = True
    except Exception as e:
        test_passed = False
        print(f"–û—à–∏–±–∫–∞: {e}")
    print_test_result("–®–∞–≥ 1 - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç", test_passed)
    
    print("\nüìç –®–ê–ì 2: –ò–ù–¢–ï–†–§–ï–ô–° + –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†")
    try:
        calculator = Calculator()
        print("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ü–µ—Ä–µ–¥–∞–µ–º '2+2' –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É")
        result = calculator.evaluate("2+2")
        expected = 4
        test_passed = result == expected
        print(f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: 2+2 = {result}")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {expected}")
    except Exception as e:
        test_passed = False
        print(f"–û—à–∏–±–∫–∞: {e}")
    print_test_result("–®–∞–≥ 2 - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã—á–∏—Å–ª—è–µ—Ç", test_passed, expected)
    
    print("\nüìç –®–ê–ì 3: –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å + –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä + –∏—Å—Ç–æ—Ä–∏—è)")
    try:
        calculator = Calculator()
        history = HistoryManager()
        
        print("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ü–µ—Ä–µ–¥–∞–µ–º '3*4' –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—É")
        result = calculator.evaluate("3*4")
        expected = 12
        test_passed_calc = result == expected
        
        print("–ò—Å—Ç–æ—Ä–∏—è: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        history.add_record("3*4", result)
        history_data = history.get_history()
        test_passed_hist = len(history_data) == 1
        
        test_passed = test_passed_calc and test_passed_hist
        print(f"–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: 3*4 = {result}")
        print(f"–ò—Å—Ç–æ—Ä–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(history_data)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        test_passed = False
        print(f"–û—à–∏–±–∫–∞: {e}")
    print_test_result("–®–∞–≥ 3 - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç", test_passed)
    
    print("\nüìç –®–ê–ì 4: –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢")
    try:
        calculator = Calculator()
        history = HistoryManager()
        
        test_expressions = [
            ("10+5", 15),
            ("20/4", 5),
            ("(2+3)*4", 20)
        ]
        
        all_passed = True
        for expr, expected in test_expressions:
            result = calculator.evaluate(expr)
            history.add_record(expr, result)
            passed = result == expected
            all_passed = all_passed and passed
            print(f"  {expr} = {result} {'‚úÖ' if passed else '‚ùå'}")
        
        history_data = history.get_history()
        print(f"–ò—Å—Ç–æ—Ä–∏—è: {len(history_data)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        all_passed = False
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    print_test_result("–®–∞–≥ 4 - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", all_passed)

def test_bottom_up():
    """–í–û–°–•–û–î–Ø–©–ï–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï (—Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö)"""
    print("\n" + "="*60)
    print("üîº –í–û–°–•–û–î–Ø–©–ï–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("="*60)
    
    print("\nüìç –®–ê–ì 1: –¢–û–õ–¨–ö–û –ò–°–¢–û–†–ò–Ø")
    try:
        history = HistoryManager()
        
        print("–î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é")
        history.add_record("test1", "result1")
        history.add_record("test2", "result2")
        
        history_data = history.get_history()
        test_passed = len(history_data) == 2
        print(f"–ò—Å—Ç–æ—Ä–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(history_data)} –∑–∞–ø–∏—Å–µ–π")
        
        if test_passed:
            last_record = history_data[-1]
            test_passed = (last_record['expression'] == 'test2' and 
                          last_record['result'] == 'result2')
            print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: {last_record['expression']} = {last_record['result']}")
        
    except Exception as e:
        test_passed = False
        print(f"–û—à–∏–±–∫–∞: {e}")
    print_test_result("–®–∞–≥ 1 - –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ", test_passed)
    
    print("\nüìç –®–ê–ì 2: –ò–°–¢–û–†–ò–Ø + –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†")
    try:
        calculator = Calculator()
        history = HistoryManager()
        
        print("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
        expressions = ["5+3", "10-2", "4*2"]
        expected_results = [8, 8, 8]
        
        all_passed = True
        for i, expr in enumerate(expressions):
            result = calculator.evaluate(expr)
            history.add_record(expr, result)
            passed = result == expected_results[i]
            all_passed = all_passed and passed
            print(f"  {expr} = {result} {'‚úÖ' if passed else '‚ùå'}")
        
        history_data = history.get_history()
        print(f"–ò—Å—Ç–æ—Ä–∏—è: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(history_data)} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        all_passed = False
        print(f"–û—à–∏–±–∫–∞: {e}")
    print_test_result("–®–∞–≥ 2 - –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä + –∏—Å—Ç–æ—Ä–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã", all_passed)
    
    print("\nüìç –®–ê–ì 3: –ü–û–õ–ù–ê–Ø –°–ò–°–¢–ï–ú–ê (–∏–º–∏—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)")
    try:
        calculator = Calculator()
        history = HistoryManager()
        
        print("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
        user_inputs = [
            "15/3",  
            "2**3",   
            "100-50" 
        ]
        
        expected_results = [5, 8, 50]
        all_passed = True
        
        for i, user_input in enumerate(user_inputs):
            print(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª: '{user_input}'")
            
            result = calculator.evaluate(user_input)
            print(f"  –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–µ—Ä–Ω—É–ª: {result}")
            
            history.add_record(user_input, result)
            print(f"  –ò—Å—Ç–æ—Ä–∏—è: –∑–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
            
            passed = result == expected_results[i]
            all_passed = all_passed and passed
        
        history_data = history.get_history()
        history_ok = len(history_data) == len(user_inputs)
        print(f"–ò—Å—Ç–æ—Ä–∏—è: –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π - {len(history_data)}")
        
        test_passed = all_passed and history_ok
        
    except Exception as e:
        test_passed = False
        print(f"–û—à–∏–±–∫–∞: {e}")
    print_test_result("–®–∞–≥ 3 - –ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", test_passed)
    
    print("\nüìç –®–ê–ì 4: –¢–ï–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö")
    try:
        calculator = Calculator()
        history = HistoryManager()
        
        print("–¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π")
        
        try:
            calculator.evaluate("10/0")
            zero_division_handled = False
            print("  –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å: ‚ùå –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        except Exception as e:
            zero_division_handled = "–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å" in str(e)
            print(f"  –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å: ‚úÖ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ('{e}')")
        
        try:
            calculator.evaluate("2++2")
            syntax_error_handled = False
            print("  –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ‚ùå –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        except Exception as e:
            syntax_error_handled = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ" in str(e)
            print(f"  –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ‚úÖ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ('{e}')")
        
        valid_result = calculator.evaluate("2+2")
        valid_works = valid_result == 4
        print(f"  –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: 2+2={valid_result} ‚úÖ")
        
        test_passed = zero_division_handled and syntax_error_handled and valid_works
        
    except Exception as e:
        test_passed = False
        print(f"–û—à–∏–±–∫–∞: {e}")
    print_test_result("–®–∞–≥ 4 - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç", test_passed)

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ò–°–¢–ï–ú–´ –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†–ê")
    print("="*60)
    
    test_top_down()
    
    test_bottom_up()
    
    print("\n" + "="*60)
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    print("="*60)

if __name__ == '__main__':
    run_all_tests()